name: Infrastructure Provision, Deploy and Configure

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Copy ssh key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/deji_new.pub
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deji_new
          chmod 600 ~/.ssh/deji_new

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: Terraform Init
        run: |
          cd terraform
          terraform init
      
      - name: Terraform validate
        run: |
          cd terraform
          terraform validate
  
      - name: Terraform plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true
      
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
  
            <details><summary>Show Plan</summary>
  
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
  
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
  
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
  
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
  
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      - name: Wait for instance to be SSH ready
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          timeout 300 bash -c 'while ! nc -z ${{ secrets.ELASTIC_IP }} 22; do sleep 1; done'

  ansible:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install Python
        run: sudo apt-get update && sudo apt-get install -y python3-pip

      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      - name: SSH into EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ELASTIC_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            ansible-playbook -i ansible/inventory.yaml --extra-vars '@ansible/terraform_vars.yml' ansible/playbook.yaml


      - name: Cleanup Sensitive Files
        if: always()
        run: |
          rm -f ~/.ssh/deji_new